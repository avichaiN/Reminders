{"version":3,"sources":["view/components/login/login.js","view/components/singleReminder/singleReminder.js","view/components/reminders/reminders.js","view/components/time/time.js","view/img/clock.png","App.js","index.js"],"names":["Login","props","className","onSubmit","e","preventDefault","name","target","children","value","setName","setReminderPage","maxLength","required","type","id","moment","require","format","SingleReminder","info","reminderText","reminderTime","place","useState","bgColor","setBgColor","isExpired","setExpiredLine","dateObj","Date","momentString","setInterval","getTime","style","width","background","onClick","onDelete","Reminders","reminders","setReminders","showAddReminder","setShowAddReminder","buttonText","setButtonText","startDate","setStartDate","deleteReminder","filter","reminder","sortedReminders","sort","a","b","reminderInfo","Math","floor","random","reset","placeholder","rows","showTimeSelect","timeIntervals","timeFormat","dateFormat","selected","onChange","date","map","index","LiveTime","goodDate","toString","split","trim","time","setTime","App","showRemindersPage","userName","src","imgClock","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8495671e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Login = (props) => {\r\n\r\n    const handleEnterName = (e) => {\r\n        e.preventDefault()\r\n        const name = e.target.children.name.value\r\n        props.setName(name)\r\n        props.setReminderPage(true)\r\n    }\r\n\r\n    return (\r\n\r\n        <div className='enterNameContainer'>\r\n            <h1 className='title'>All your Reminders in one spot!</h1>\r\n            <h3 className='sTitle'>Enter name to begin!</h3>\r\n            <form className=\"form-floating mb-3 firstName d-flex flex-column\" onSubmit={handleEnterName}>\r\n                <input maxLength='20' name='name' required type=\"text\" className=\"form-control inputName\" id=\"floatingInput\" />\r\n                <label className='labelName'>First Name</label>\r\n                <button className=\"btn btn-primary submitNameButton\">Login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, { useState } from 'react';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nconst moment = require('moment'); // require\r\nmoment().format();\r\n\r\n\r\nfunction SingleReminder(props) {\r\n\r\n    const { reminderText, reminderTime, id } = props.info\r\n    const { place } = props\r\n\r\n    const [bgColor, setBgColor] = useState('')\r\n    const [isExpired, setExpiredLine] = useState(false)\r\n\r\n    const dateString = reminderTime;\r\n    const dateObj = new Date(dateString);\r\n    const momentObj = moment(dateObj);\r\n    const momentString = momentObj.format('DD/MM/YYYY - HH:mm');\r\n\r\n    const checkIfExpired = () => {\r\n        const date = new Date()\r\n        const dateMili = date.getTime()\r\n\r\n        if (dateMili >= reminderTime.getTime()) {\r\n            setBgColor('rgb(235, 124, 124)')\r\n            setExpiredLine(true)\r\n        }\r\n    }\r\n    setInterval(() => {\r\n        checkIfExpired()\r\n    }, 3000);\r\n\r\n\r\n    return (\r\n        <div>\r\n            {isExpired ?\r\n                < del className=\"card singleReminder\" style={{ width: '18rem', background: bgColor }}>\r\n                    <div className=\"card-body\">\r\n                        <div className='cardTitleDelete'>\r\n                            <h5 className=\"card-title\">Reminder #{place}</h5>\r\n                            <DeleteIcon className='deleteReminder' onClick={() => props.onDelete(id)} />\r\n                        </div>\r\n                        <h6 className=\"card-subtitle mb-2 text-muted\">Due Date-{momentString}</h6>\r\n                        <p className=\"card-text\">{reminderText}</p>\r\n                    </div>\r\n                </ del >\r\n                :\r\n                <div className=\"card singleReminder\" style={{ width: '18rem', background: bgColor }}>\r\n                    <div className=\"card-body\">\r\n                        <div className='cardTitleDelete'>\r\n                            <h5 className=\"card-title\">Reminder #{place}</h5>\r\n                            <DeleteIcon className='deleteReminder' onClick={() => props.onDelete(id)} />\r\n                        </div>\r\n                        <h6 className=\"card-subtitle mb-2 text-muted\">Due Date-{momentString}</h6>\r\n                        <p className=\"card-text\">{reminderText}</p>\r\n                    </div>\r\n                </div >}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleReminder;\r\n","import React, { useState } from 'react';\r\nimport SingleReminder from '../singleReminder/singleReminder';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n\r\nfunction Reminders() {\r\n    const [reminders, setReminders] = useState([]);\r\n    const [showAddReminder, setShowAddReminder] = useState(false)\r\n    const [buttonText, setButtonText] = useState('Add Reminder')\r\n    const [startDate, setStartDate] = useState(new Date());\r\n\r\n    const showAddReminderButton = () => {\r\n        setShowAddReminder(!showAddReminder)\r\n\r\n        if (!showAddReminder) {\r\n            setButtonText('Hide')\r\n        } else {\r\n            setButtonText('Add Reminder')\r\n        }\r\n    }\r\n\r\n    const changeDate = (date) => {\r\n        setStartDate(date)\r\n    }\r\n\r\n    const handleNewReminder = (e) => {\r\n        e.preventDefault()\r\n        const reminderText = e.target.children.reminder.value\r\n        const reminderTime = startDate\r\n        const id = Math.floor(Math.random() * 100000) + 5;\r\n\r\n        const reminderInfo = { reminderText, reminderTime, id }\r\n        setReminders([...reminders, reminderInfo])\r\n        setButtonText('Add Reminder')\r\n        setShowAddReminder(!showAddReminder)\r\n        e.target.reset()\r\n\r\n    }\r\n\r\n    const deleteReminder = (id) => {\r\n        setReminders(reminders.filter((reminder) => reminder.id !== id));\r\n    }\r\n\r\n    const sortedReminders = reminders.sort((a, b) => a.reminderTime - b.reminderTime)\r\n    return (\r\n        <div className='reminderBox'>\r\n            <button className='btn btn-primary showReminderButton' onClick={showAddReminderButton}>{buttonText}</button>\r\n\r\n            {showAddReminder ?\r\n                <div className='addReminderBox'>\r\n                    <form className=\"mb-3 addReminderBoxForm\" onSubmit={handleNewReminder}>\r\n                        <textarea className=\"form-control reminderText\" placeholder='Reminder Text' id=\"exampleFormControlTextarea1\" name='reminder' rows=\"3\"></textarea>\r\n                        <DatePicker className='timeDate' showTimeSelect timeIntervals={5} timeFormat=\"HH:mm\" dateFormat=\"dd/MM/YYY HH:mm\" selected={startDate} onChange={changeDate} />\r\n                        <button type=\"submit\" className=\"btn btn-outline-primary submitNewReminder\">Add</button>\r\n                    </form>\r\n                </div>\r\n                :\r\n                null\r\n            }\r\n            <div className='allReminders'>\r\n                {sortedReminders.map((reminder, index) => {\r\n                    return (<SingleReminder onDelete={deleteReminder} key={reminder.id} info={reminder} place={index + 1} />)\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Reminders;\r\n","import React, { useState } from 'react';\r\n\r\n\r\nconst LiveTime = () => {\r\n\r\n    const date = new Date()\r\n    const dateString = date.toString();\r\n    const goodDate = dateString.split('GMT')[0].trim()\r\n    const [time, setTime] = useState(goodDate)\r\n\r\n    setInterval(() => {\r\n        const date = new Date()\r\n        const dateString = date.toString();\r\n        const goodDate = dateString.split('GMT')[0].trim()\r\n        setTime(goodDate)\r\n    }, 1000);\r\n    return (<h2 className=\"time sTitle\">{time}</h2>)\r\n}\r\n\r\nexport default LiveTime","export default __webpack_public_path__ + \"static/media/clock.f95dda2d.png\";","import React, { useState, useEffect } from 'react';\r\nimport Login from './view/components/login/login'\r\nimport Reminders from './view/components/reminders/reminders';\r\nimport LiveTime from './view/components/time/time'\r\nimport './view/dist/index.css'\r\nimport imgClock from './view/img/clock.png'\r\n\r\n\r\n// const getJoke = (setJoke) => {\r\n//   fetch('https://api.chucknorris.io/jokes/random')\r\n//     .then(r => r.json())\r\n//     .then(joke => {\r\n//       setJoke(joke.value)\r\n//     })\r\n// }\r\n\r\nfunction App() {\r\n  const [showRemindersPage, setReminderPage] = useState(false)\r\n  const [userName, setName] = useState('')\r\n\r\n  // const [joke, setJoke] = useState('')\r\n  // const [counter, setCounter] = useState(0)\r\n\r\n\r\n  // useEffect(() => {\r\n  //   getJoke(setJoke);\r\n  // }, [counter])\r\n\r\n\r\n  // const handleCounter = () => {\r\n  //   setCounter(counter + 1)\r\n  // }\r\n\r\n  return (\r\n    <div className=\"App container-xl\">\r\n\r\n      {/* <button onClick={handleCounter}>Add to Count</button>\r\n      <span>{counter}</span>\r\n      <span>{joke}</span> */}\r\n\r\n      <img className='clockImg' src={imgClock} />\r\n      <img className='dontForgetImg' src='https://img2.pngio.com/free-png-meeting-reminder-transparent-meeting-reminderpng-images-reminders-png-820_694.jpg' />\r\n      <div className='mainContainer'>\r\n        {\r\n          showRemindersPage ?\r\n            <div className='reminderContainer'>\r\n              <h1 className='title'>Hey {userName}, Your Reminders.</h1>\r\n              <LiveTime />\r\n              <Reminders />\r\n            </div>\r\n            :\r\n            <Login setReminderPage={setReminderPage} setName={setName} />\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}